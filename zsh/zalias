# nav
alias u='cd ../'
alias b='cd $OLDPWD'
alias h='cd ~'
alias doc='cd ~/Documents'
alias dl='cd ~/Downloads'
alias doot='cd ~/.dotfiles'

# typos
alias ivm='vim'
alias les='less'


# data processing
len() {
   #perl -e 'print length("$1")'
   echo -n "$1" | wc -c
}
alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"

alias h2b='hex2bin'
alias b2h='bin2hex'
alias hex2bin='xxd -ps -r'
alias bin2hex='xxd -ps'
#hex2bin() {
#   #sed 's/\([0-9A-F]\{2\}\)/\\\\\\x\1/gI' "$1" | xargs printf
#}
#bin2hex() {
#   #hexdump -C "$1" | cut -b9- | cut -d"|" -f1 | tr -d ' \t\n\r'
#}

# useful
alias reload="source ~/.zshrc"
alias rel=reload
alias zedit='vim ~/.zalias' #because i've been editing this file like crazy 
alias snips='vim ~/.dotfiles/vim/bundle/mysnippets/snippets/python.snippets' #this one too

# other stuff
rng() {
   od -tu2 -vAn -N$1 < /dev/urandom | tr '\n' ' ' | sed 's/ //g'
}

alias rainbow='for (( i = 30; i < 38; i++ )); do echo -e "\033[0;"$i"m Normal: (0;$i); \033[1;"$i"m Light: (1;$i)"; done'

#pinched from https://unix.stackexchange.com/a/30486
calc () {
    bc -l <<< "$@"
}
# tbh i just use echo $(()) now

# recon
subl() {
   #sublist3r.py -d $1 -p80 | grep "Found open" | cut -f1 -d' '
   # ^this is generating unprintable chars, pls fix
   sublist3r.py -d $1 -p80 | grep "Found open" | cut -f1 -d' ' | cut -c6- | sed 's/....$//g'
   # hacky af
}

zd() {
   domain=`echo "$1" | sed 's/\./\\./g'` # escape dots so the cmd below works properly
   wordlist=$2
   cat $wordlist | sed 's/$/\.'$domain'/g' | ~/go/bin/zdns A | grep "NOERROR" | grep -v "127.0.0.1" | jq '.["name"]' | sed 's/\"//g'
}

gobs() {
   domain=$1
   wordlist=$2
   gobuster -m dns -u $domain -w $wordlist -t 50 -q | cut -f2 -d' '
}

gobd() {
   echo "remember to use https lol"
   domain=$1
   wordlist=$2
   gobuster -m dir -u $domain -w $wordlist -t 50 -q # | cut -f2 -d' '
}

dstrip() { # strip domain names
   domain=`echo "$1" | sed 's/\./\\./g'`
   wordlist=$2
   cat $wordlist | sed 's/\.'$domain'$//g'
}

mrg() { #merge wordlists
   cat "$@" | sort -u
}

mash() {
   domain=$1
   wordlist=$2
   known=`rng 7`
   touch "$known.subdomains.txt"
   echo "Dumping subdomains in $known.subdomains.txt..."
   subl $domain >> "$known.subdomains.txt" &
   gobs $domain $wordlist >> "$known.subdomains.txt" &
   zd $domain $wordlist >> "$known.subdomains.txt" &
   wait
   sort "$known.subdomains.txt" -u -o "$known.subdomains.txt"
   dstrip $domain "$known.subdomains.txt" > "$known.words.txt"
   echo "pls inspect output files for unprintable chars"
}

altd() {
   echo "Make sure list of known subdomains still has the domain suffix"
   domain=$1
   knownsubs=$2
   wordlist=$3
   outfile=$4
   dummy=`rng 7`
   altdns.py -i $knownsubs -w $wordlist -o $outfile.rng
   dstrip $domain $outfile.rng > $outfile
   rm -f $outfile.rng
}

#fz() {
#   url=$1
#   verb=$2
#   payload=$3
#   lower=$4
#   upper=$5
#   session=$6
#   wfuzz -p localhost:8080 --filter "content=~'false'" -Z -c -v -X $verb -H "Content-Type: application/x-www-form-urlencoded" -z range,$lower-$upper -b "session=$session" -d "$payload" "$url" 
#}
fz() {
   url=$1
   payload=$2
   lower=$3
   upper=$4
   avoid=$5
   wfuzz --filter "content!~'$avoid'" -c -z range,$lower-$upper -d $payload $url
   #^if using this outside of an alias, you need to escape the exclamation mark
}

# binexp
sysoff() { #get libc offset of system() (for a given libc)
   readelf -s $1 | grep system
   # equivalent in pwntools is ELF('name of libc').symbols['system']
}

shoff() { #get libc offset of "/bin/sh" (for a given libc)
   strings -t x ./program | grep "/bin/sh"
   # equivalent in pwntools is next(ELF('name of libc').search('/bin/sh\x00'))
}

libc() { #given a binary, find which libc it uses locally + other info, incl. start address (possibly randomised)
   # don't expect this to work if the binary doesn't wait for input and finishes instantly
   ./$1 & pwnme=`pidof ./$1`; cat /proc/$pwnme/maps | grep libc | head -n 1 | uniq; kill -9 $pwnme
}

libcname() { #given a binary, find which libc it uses locally
   # don't expect this to work if the binary doesn't wait for input and finishes instantly
   ./$1 & pwnme=`pidof ./$1`; cat /proc/$pwnme/maps | grep libc | sed 's/.*    //g' | uniq; kill -9 $pwnme
}

bof() { #basic probe for bof, don't be surprised if it doesn't work
   cyclic -l `cyclic 200 | strace ./$1 3>&1 1>&2 2>&3 3>&- | grep si_addr | sed -E 's/.*si_addr=(.*)}.*/\1/g'`
}
#TODO:add variant which takes in input size as argument, call it bofn
bofn() { #basic probe for bof, don't be surprised if it doesn't work
   cyclic -l `cyclic $1 | strace ./$2 3>&1 1>&2 2>&3 3>&- | grep si_addr | sed -E 's/.*si_addr=(.*)}.*/\1/g'`
}

aslroff() {
   echo 0 >! /proc/sys/kernel/randomize_va_space
}

aslron() {
   echo 2 >! /proc/sys/kernel/randomize_va_space
}
#why didn't i make those two one line aliases?

alias dumpt='objdump -TR'
alias dump='objdump -xDM intel'

alias rop='ROPgadget --ropchain --binary'

#r2 aliases
alias afll="r2 -Aqc 'afll'"
alias agc="r2 -Aqc 's main; agc'"
alias agC="r2 -Aqc 'agC'"
alias agcv="r2 -Aqc 's main; agcv'"
alias agCv="r2 -Aqc 'agCv'"
alias agA="r2 -Aqc 'agA'"
alias agAv="r2 -Aqc 'agAv'"

binfo() {
   YELLOW='\033[1;33m'; WHITE='\033[1;37m'; GREEN='\033[1;32m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; NC='\033[0m'; pwnme=$1; checksec ${pwnme}; paste <(echo "${WHITE}FUNCTIONS/SYMBOLS${NC}"; rabin2 -qs ${pwnme} | egrep -ve ' (0|1) ' -e imp -e ' _' | sort -k 1) /dev/null <(echo "${GREEN}STRINGS${NC}"; rabin2 -z ${pwnme}) | column -s $'\t' -tn; echo "${YELLOW}LIBRARY FUNCTIONS${NC}"; echo "${RED}Pwnable:${NC}"; rabin2 -i ${pwnme} | egrep '( gets| scanf|strcpy|strcat|strncat|malloc|system)' | cut -c5- | sed 's/scanf/scanf (one-byte overflow if field width is equal to buffer length)/' | sed 's/malloc/malloc (probably a heap pwnable)/' | sed 's/system/system (probably a win function!!!)/' ; echo "${PURPLE}Leakable:${NC}" && rabin2 -i ${pwnme} | egrep '(read|strncpy|memcpy)' | cut -c5-
}

alias rage="source ~/.virtualenvs/angr/bin/activate"

# source audit
fmtgrep() {
   #cat -n $1 | egrep "printf\([^\"]"
   cat -n $1 | egrep "([^fsn]printf *\( *[_A-Za-z]|sprintf *\( *[^\"]+ *, *[_A-Za-z]|fprintf *\( *[^\"]+ *, *[_A-Za-z])"
}

badgrep() {
   cat -n $1 | egrep "(scanf *\( *\"[^\"]*%s|[^f]gets|strcpy|strcat|strncat)"
}

susgrep() {
   cat -n $1 | egrep "(scanf *\( *\"[^\"]*%[0-9]*s|[^f]gets|strcpy|strcat|strncat|memcpy|strncpy|read)"
}

switchgrep() {
   cat -n $1 | egrep "switch"
}

coc() {
   #https://stackoverflow.com/a/4341647
   if [ "$#" -eq 1 ] ; then
      # https://stackoverflow.com/a/7802785
      case $1 in *.cocci) spatch --parse-cocci $1;; 
               *.c) spatch --parse-c $1;;
               *) echo "\033[0;31m$1 is not a .c or .cocci file\033[0m";;
      esac
      #spatch --parse-cocci uaf.cocci
   elif [ "$#" -eq 2 ] ; then
      if [[ "$1" = *.cocci ]] && [[ "$2" = *.c ]] ; then
         spatch --sp-file $1 $2
      else
         echo "\033[0;31mdouble argument form takes a .cocci and .c\033[0m"
      fi
   else
      cat << "USAGE" 
Usage:
   coc *.c :            Alias for spatch --parse-c foo.c
   coc *.cocci :        Alias for spatch --parse-cocci foo.cocci
   coc *.cocci *.c :    Alias for spatch --sp-file foo.cocci foo.c

For more info, see http://coccinelle.lip6.fr/docs/options.pdf
USAGE
   fi
}

alias uaf="coc ~/fuckshitlol/uaf.cocci "
alias sizeof="coc ~/fuckshitlol/noderef.cocci "
alias nullderef="coc ~/fuckshitlol/nullcheck.cocci "
alias mathgrep="coc ~/fuckshitlol/arithmetic.cocci "
alias ass="coc ~/fuckshitlol/assignment_in_if.cocci "

alias anal="gcc -Wall -Wextra -Wformat-security -Wconversion -Wsign-conversion -D_FORTIFY_SOURCE=2 -O2 "

audit() {
   YELLOW='\033[1;33m'; WHITE='\033[1;37m'; GREEN='\033[1;32m'; RED='\033[0;31m'; PURPLE='\033[0;35m'; NC='\033[0m';
   echo "${YELLOW}Format strings:${NC}"
   fmtgrep $1
   echo "${WHITE}Sizeof pointer:${NC}"
   sizeof $1
   echo "${GREEN}Null dereference:${NC}"
   nullderef $1
   echo "${RED}UAF:${NC}"
   uaf $1
   echo "${PURPLE}bof:${NC}"
   badgrep $1
   echo "= instead of =="
   ass $1
   echo "switch case grep, expect many false positives"
   switchgrep $1
   echo "Broad sus grep, expect many false positives"
   susgrep $1
   #echo "Arithmetic operator grep, expect many false positives"
   #mathgrep $1
   echo "Run mathgrep $1 for a listing of all arithmetic"
   echo "Run anal $1 for hardened gcc warnings"
}

line() {
   awk '{print "/*" NR "*/\t" $0}' $1 > $2
}
